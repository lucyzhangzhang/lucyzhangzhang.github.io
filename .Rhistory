load("D:/PhD/Analysis/10T/graphs.RData")
scores
percentage
var <- percentage/100
plot_ly(y = var)
library(plotly)
plot_ly(y = var)
plot_ly(y = var, type = "bar")
var
plot_ly(x = colnames(var), y = var, type = "bar")
var <- t(percentage/100)
plot_ly(y = var, type = "bar")
var
plot_ly(y = var[,1], type = "bar")
plot(var)
plot_ly(y = var[,1], type = "bar")
var <- t(percentage/100)
plot_ly(y = var, type = "bar")
var
var <- data.frame(PC = row.names(var), val = var[,1])
plot_ly(y = var, type = "bar")
var
plot_ly(var, type = "bar")
plot_ly(var, y = var[,1], type = "bar")
plot_ly(var, x = ~PC, y = ~val, type = "bar")
```{r variances plot, echo = F, warning = F}
```{r variances plot, echo = F, warnings = F}
var <- t(percentage/100)
var <- data.frame(PC = row.names(var), val = var[,1])
plot_ly(data = var, x = PC, y = ~val, type = "bar")
plot_ly(data = var, x = var$PC, y = ~val, type = "bar")
var$PC
plot_ly(data = var, x = as.factor(var$PC), y = ~val, type = "bar")
var <- var[1:10,]
var
plot_ly(data = var, x = as.factor(var$PC), y = ~val, type = "bar",
xaxis_type = "category")
?plot_ly
var <- t(percentage/100)
var <- var[1:10,]
plot_ly(data = var, x = as.factor(var$PC), y = ~val, type = "bar")
var <- data.frame(var[1:10,])
cra
var
var <- t(percentage/100)
var <- data.frame(var[1:10,])
var
var <- data.frame(PC = row.names(var), val = var[,1])
var
var <- t(percentage/100)
var <- data.frame(PC = row.names(var)[1:10], val = var[1:10,1])
plot_ly(data = var, x = as.factor(var$PC), y = ~val, type = "bar")
var <- t(percentage/100)
var <- data.frame(PC = row.names(var)[1:10], val = var[1:10,1])
var$PC <- factor(var$PC, levels = var$PC)
plot_ly(data = var, x = as.factor(var$PC), y = ~val, type = "bar")
?prcomp
var <- t(percentage/100)
var <- data.frame(PC = row.names(var)[1:10], val = var[1:10,1])
var$PC <- factor(var$PC, levels = var$PC)
plot_ly(data = var, x = as.factor(var$PC), y = ~val, type = "bar") %>%
layout(xaxis = "Proportion of Variance", yaxis = "Principal Component")
plot_ly(data = var, x = as.factor(var$PC), y = ~val, type = "bar") %>%
layout(xaxis = list(title = "Proportion of Variance"),
yaxis = list(title = "Principal Component"))
library(plotly)
library(plotly)
load("D:/PhD/Analysis/10T/graphs.RData")
head(scores)
percentage
plot_ly(scores, x = PC1, y = PC2, text = rownames(scores),
marker = list(size = 11)) %>%
layout(title = paste0("PCA: ", title),
xaxis = list(title = paste0("PC", as.character(1), " (", percentage[1], "%)")),
yaxis = list(title = paste0("PC", as.character(2), " (", percentage[2], "%)")))
scores
plot_ly(scores, x = ~PC1, y = ~PC2, text = rownames(scores),
marker = list(size = 11)) %>%
layout(title = paste0("PCA: ", title),
xaxis = list(title = paste0("PC", as.character(1), " (", percentage[1], "%)")),
yaxis = list(title = paste0("PC", as.character(2), " (", percentage[2], "%)")))
plot_ly(data = scores, x PC1, y = PC2, text = rownames(scores),
plot_ly(data = scores, x = PC1, y = PC2, text = rownames(scores),
marker = list(size = 11)) %>%
layout(title = paste0("PCA: ", title),
xaxis = list(title = paste0("PC", as.character(1), " (", percentage[1], "%)")),
yaxis = list(title = paste0("PC", as.character(2), " (", percentage[2], "%)")))
plot_ly(data = scores, x = scores$PC1, y = scores$PC2, text = rownames(scores),
marker = list(size = 11)) %>%
layout(title = paste0("PCA: ", title),
xaxis = list(title = paste0("PC", as.character(1), " (", percentage[1], "%)")),
yaxis = list(title = paste0("PC", as.character(2), " (", percentage[2], "%)")))
plot_ly(data = scores, x = scores$PC1, y = scores$PC2, text = rownames(scores),
marker = list(size = 11)) %>%
layout(title = paste0("PCA: ", title),
xaxis = list(title = paste0("PC", as.character(1), " (", as.character(percentage[1]), "%)")),
yaxis = list(title = paste0("PC", as.character(2), " (", as.character(percentage[2]), "%)")))
plot_ly(data = scores, x = scores$PC1, y = scores$PC2, text = rownames(scores),
marker = list(size = 11)) %>%
layout(title = paste0("PCA: ", title),
xaxis = list(title = paste0("PC", as.character(1), " (", as.character(percentage[1]), "%)")))
plot_ly(data = scores, x = scores$PC1, y = scores$PC2, text = rownames(scores),
marker = list(size = 11)) %>%
layout(title = paste0("PCA: ", title),
xaxis = list(title = paste0("PC", 1, " (", as.character(percentage[1]), "%)")))
plot_ly(data = scores, x = scores$PC1, y = scores$PC2, text = rownames(scores),
marker = list(size = 11)) %>%
layout(title = paste0("PCA: ", title),
xaxis = list(title = paste0("PC", " (", "%)")))
plot_ly(data = scores, x = scores$PC1, y = scores$PC2, text = rownames(scores),
marker = list(size = 11)) %>%
layout(title = paste0("PCA: ", title),
xaxis = list(title = paste0("PC1")))
plot_ly(data = scores, x = scores$PC1, y = scores$PC2, text = rownames(scores),
marker = list(size = 11)) %>%
layout(title = paste0("PCA: ", title),
xaxis = list(title = "PC1"))
plot_ly(data = scores, x = scores$PC1, y = scores$PC2, text = rownames(scores),
marker = list(size = 11)) %>%
layout(title = paste0("PCA: ", "test"),
xaxis = list(title = "PC1"))
plot_ly(data = scores, x = scores$PC1, y = scores$PC2, text = rownames(scores),
mode = "markers", marker = list(size = 11)) %>%
layout(title = paste0("PCA: ", "test"),
xaxis = list(title = "PC1"))
load("D:/PhD/Analysis/10T/graphs.RData")
plot_ly(data = scores, x = scores$PC1, y = scores$PC2, text = rownames(scores),
mode = "markers", marker = list(size = 11), color = condition) %>%
layout(title = paste0("PCA: ", "test"),
xaxis = list(title = "PC1"))
plot_ly(data = scores, x = scores$PC1, y = scores$PC2, z = scores$PC3, text = rownames(scores),
mode = "markers", marker = list(size = 11), color = condition) %>%
layout(title = paste0("PCA: ", "test"),
xaxis = list(title = "PC1"))
plot_ly(data = scores, x = scores$PC1, y = scores$PC2, z = scores$PC3, text = rownames(scores),
type = "3dscatter", marker = list(size = 11), color = condition) %>%
layout(title = paste0("PCA: ", "test"),
xaxis = list(title = "PC1"))
plot_ly(data = scores, x = scores$PC1, y = scores$PC2, z = scores$PC3, text = rownames(scores),
type = "scatter3d", marker = list(size = 11), color = condition) %>%
layout(title = paste0("PCA: ", "test"),
xaxis = list(title = "PC1"))
plot_ly(data = scores, x = scores$PC1, y = scores$PC2, z = scores$PC3, text = rownames(scores),
type = "scatter3d", mode = "markers", marker = list(size = 11), color = condition) %>%
layout(title = paste0("PCA: ", "test"),
xaxis = list(title = "PC1"))
plot_ly(data = scores, x = scores$PC1, y = scores$PC2, z = scores$PC3, text = rownames(scores),
type = "scatter3d", mode = "markers", marker = list(size = 5), color = condition) %>%
layout(title = paste0("PCA: ", "test"),
xaxis = list(title = "PC1"))
plot_ly(data = scores, x = scores$PC1, y = scores$PC2, z = scores$PC3, text = rownames(scores),
type = "scatter3d", mode = "markers", marker = list(size = 5), color = condition) %>%
layout(title = paste0("PCA: ", "test"),
xaxis = list(title = "PC1"),
yaxis = list(title = paste0("PC", as.character(2), " (", as.character(percentage[2]), "%)")))
plot_ly(data = scores, x = scores$PC1, y = scores$PC2, z = scores$PC3, text = rownames(scores),
type = "scatter3d", mode = "markers", marker = list(size = 5), color = condition) %>%
layout(title = paste0("PCA: ", "test"),
scene = list(xaxis = list(title = "PC1"),
yaxis = list(title = "PC2"),
zaxis = list(title = "PC2")))
plot_ly(data = scores, x = scores$PC1, y = scores$PC2, z = scores$PC3, text = rownames(scores),
type = "scatter3d", mode = "markers", marker = list(size = 5), color = condition) %>%
layout(title = paste0("PCA: ", "test"),
scene = list(xaxis = list(title = "PC1"),
yaxis = list(title = "PC2"),
zaxis = list(title = "PC3")))
yaxis = list(title = paste0("PC2 (", percentage[2], "%)")),
plot_ly(data = scores, x = scores$PC1, y = scores$PC2, z = scores$PC3, text = rownames(scores),
type = "scatter3d", mode = "markers", marker = list(size = 5), color = condition) %>%
layout(title = paste0("PCA: ", "test"),
scene = list(xaxis = list(title = paste0("PC1 (", percentage[1], "%)")),
yaxis = list(title = paste0("PC2 (", percentage[2], "%)")),
zaxis = list(title = paste0("PC3 (", percentage[3], "%)"))))
library(plotly)
library(plotly)
load("D:/PhD/Analysis/10T/graphs.RData")
var <- t(percentage/100)
var$PC <- factor(var$PC, levels = var$PC)
plot_ly(data = var, x = as.factor(var$PC), y = ~val, type = "bar") %>%
layout(xaxis = list(title = "Principal Component"),
yaxis = list(title = "Proportion of Variance"))
var <- t(percentage/100)
var <- data.frame(PC = row.names(var)[1:10], val = var[1:10,1])
var$PC <- factor(var$PC, levels = var$PC)
plot_ly(data = var, x = as.factor(var$PC), y = ~val, type = "bar") %>%
layout(xaxis = list(title = "Principal Component"),
yaxis = list(title = "Proportion of Variance"))
plot_ly(data = scores, x = scores$PC1, y = scores$PC2, z = scores$PC3, text = rownames(scores),
type = "scatter3d", mode = "markers", marker = list(size = 5), color = condition) %>%
layout(title = paste0("PCA: ", "test"),
scene = list(xaxis = list(title = paste0("PC1 (", percentage[1], "%)")),
yaxis = list(title = paste0("PC2 (", percentage[2], "%)")),
zaxis = list(title = paste0("PC3 (", percentage[3], "%)")))) %>%
add_text(textposition = "top")
wd <- "D:/PhD/Analysis/10T/"
setwd(wd)
rawdir <- paste0(wd, "/telocal/")
outdir <- paste0(wd, "/pics/")
# libs
library(DESeq2)
library(plotly)
library(gplots)
library(dplyr)
library(tidyverse)
library(GenomicFeatures)
library(RColorBrewer)
library(ggrepel)
# file names are "file.cntTable"
design <- read.table("meta", header = T)
rownames(design) <- design$file
design$replicate <- factor(design$replicate)
design$batch <- factor(design$batch)
# metadata table
meta <- data.frame(sampleName = paste0(design$file, ".cntTable"),
fileName = paste0(design$file, ".cntTable"),
sample = design$sample,
condition = design$batch,
replicate = design$replicate)
#   lapply(function(x) deframe(fread(x)))
#
# # unique ID
# gs <- lapply(d, names) %>% Reduce(union, .)
#
# # matrix
# cts <- lapply(d, `[`, gs) %>% setDT()
#
# # save as image
# save(gs, cts, file = 'counts.RData')
load('counts.RData')
head(gs)
head(cts)
rownames(cts) <- gs
colnames(cts) <- sort(as.vector(design$file))
# Create DESeq obj
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = design,
design = ~batch+replicate)
# hard filter
rownames(dds) <- gs
keep <- rowSums(counts(dds)) > 0
dds <- dds[keep,]
dds <- DESeq(dds, fitType = "local")
# directories
wd <- "D:/PhD/Analysis/10T/"
setwd(wd)
rawdir <- paste0(wd, "/telocal/")
outdir <- paste0(wd, "/pics/")
# libs
library(DESeq2)
library(plotly)
library(gplots)
library(dplyr)
library(tidyverse)
library(GenomicFeatures)
library(RColorBrewer)
library(ggrepel)
design <- read.table("meta", header = T)
rownames(design) <- design$file
design <- design[grepl("C3H10T1", design$batch),]
design$sample <- factor(design$sample)
design$replicate <- factor(design$replicate)
design$batch <- factor(design$batch)
meta <- data.frame(sampleName = paste0(design$file, ".cntTable"),
fileName = paste0(design$file, ".cntTable"),
sample = design$sample,
condition = design$batch,
replicate = design$replicate)
load('counts.RData')
head(gs)
head(cts)
rownames(cts) <- gs
cts_t <- cts %>% dplyr::select(contains("C3H10T1")) %>% dplyr::filter(grepl("ENSMUS.*", rownames(cts)))
dds <- DESeqDataSetFromMatrix(countData = cts_t,
colData = design,
design = ~sample)
dds$sample <- relevel(dds$sample, ref = "PA")
rownames(dds) <- gs
keep <- rowSums(counts(dds)) > 0
dds <- dds[keep,]
dds$sample
dds <- DESeq(dds)
resultsNames(dds)
features <- read.table("data/TE_split.tab", header = T)
features_trunc <- data.frame(name = features$ID, feature = features$class)
getResAndCounts <- function(dds, ... ) {
sample <- results(dds, ... )
sample <- tibble::rownames_to_column(data.frame(sample), var = "name")
sample <- sample %>% filter(padj <= 0.05) %>% left_join(., features_trunc, by = "name")
sample <- mutate(sample, feature = replace_na(as.vector(sample$feature), "ENSMUS"))
sample_pos <- sample %>% filter(log2FoldChange > 0) %>% dplyr::select(name, feature)
sample_neg <- sample %>% filter(log2FoldChange < 0) %>% dplyr::select(name, feature)
counts <- merge(data.frame(table(sample_pos$feature)),
data.frame(table(sample_neg$feature)),
by = "Var1", all = T)
counts[is.na(counts)] <- 0
colnames(counts) <- c("Feature", "PosFoldChange", "NegFoldChange")
return(list(sample = sample, counts = counts))
}
#features_trunc <- data.frame(name = features$ID, feature = features$class)
getResAndCounts <- function(dds, ... ) {
sample <- results(dds, ... )
sample <- tibble::rownames_to_column(data.frame(sample), var = "name")
sample <- sample %>% filter(padj <= 0.05) # %>% left_join(., features_trunc, by = "name")
#  sample <- mutate(sample, feature = replace_na(as.vector(sample$feature), "ENSMUS"))
sample_pos <- sample %>% filter(log2FoldChange > 0) %>% dplyr::select(name)
sample_neg <- sample %>% filter(log2FoldChange < 0) %>% dplyr::select(name)
counts <- c(nrow(sample_pos), nrow(sample_neg))
return(counts)
}
H33K36M <- getResAndCounts(dds, contrast = c("sample", "H33K36M", "PA"))
H33K36M
resTKO <- results(dds, contrast = c("sample", "H33K36M", "PA"))
resTKO <- results(dds, contrast = c("sample", "TKO", "PA"))
resTKO
rownames(resTKO)
# remove the DEC samples
# directories
wd <- "D:/PhD/Analysis/10T/"
setwd(wd)
rawdir <- paste0(wd, "/telocal/")
outdir <- paste0(wd, "/pics/")
load("C3Honly.RData")
# libs
library(DESeq2)
library(plotly)
library(gplots)
library(dplyr)i
library(tidyverse)
library(GenomicFeatures)
library(RColorBrewer)
library(ggrepel)
design <- read.table("meta", header = T)
rownames(design) <- design$file
design <- design[grepl("C3H10T1", design$batch),]
design$sample <- factor(design$sample)
design$replicate <- factor(design$replicate)
design$batch <- factor(design$batch)
meta <- data.frame(sampleName = paste0(design$file, ".cntTable"),
fileName = paste0(design$file, ".cntTable"),
sample = design$sample,
condition = design$batch,
replicate = design$replicate)
load('counts.RData')
head(gs)
head(cts)
rownames(cts) <- gs
# colnames(cts) <- sort(as.vector(design$file))
# truncated CTS
cts_t <- cts %>% dplyr::select(contains("C3H10T1"))
# Create DESeq obj
dds <- DESeqDataSetFromMatrix(countData = cts_t,
colData = design,
design = ~sample)
dds$sample <- relevel(dds$sample, ref = "PA")
rownames(dds) <- gs
keep <- rowSums(counts(dds)) > 0
dds <- dds[keep,]
dds <- DESeq(dds)
# transformation
head(gs)
head(cts)
rownames(cts) <- gs
# colnames(cts) <- sort(as.vector(design$file))
# truncated CTS
cts_t <- cts %>% dplyr::select(contains("C3H10T1"))
# Create DESeq obj
dds <- DESeqDataSetFromMatrix(countData = cts_t,
colData = design,
design = ~sample)
dds$sample <- relevel(dds$sample, ref = "PA")
rownames(dds) <- gs
keep <- rowSums(counts(dds)) > 0
dds <- dds[keep,]
dds <- DESeq(dds)
# transformation
# transformation
vst <- varianceStabilizingTransformation(dds)
resTKO <- results(dds, contrast = c("sample", "TKO", "PA"))
resTKO2 <- resTKO[grepl("ENSMUS.*", rownames(resTKO)), ]
plotMA(resTKO2)
plotMA(resTKO2, main = "Uncorrected Size Factors")
buttonplotC
View(TKO_c)
nrow(resTKO)
resTKO
# directories
wd <- "D:/PhD/Analysis/10T/"
setwd(wd)
rawdir <- paste0(wd, "/telocal/")
outdir <- paste0(wd, "/pics/")
# libs
library(DESeq2)
library(plotly)
library(gplots)
library(dplyr)
library(tidyverse)
library(GenomicFeatures)
library(RColorBrewer)
library(ggrepel)
design <- read.table("meta", header = T)
rownames(design) <- design$file
design <- design[grepl("C3H10T1", design$batch),]
design$sample <- factor(design$sample)
design$replicate <- factor(design$replicate)
design$batch <- factor(design$batch)
meta <- data.frame(sampleName = paste0(design$file, ".cntTable"),
fileName = paste0(design$file, ".cntTable"),
sample = design$sample,
condition = design$batch,
replicate = design$replicate)
load('counts.RData')
head(gs)
head(cts)
rownames(cts) <- gs
cts_t <- cts %>% dplyr::select(contains("C3H10T1")) %>% dplyr::filter(grepl("ENSMUS.*", rownames(cts)))
dds <- DESeqDataSetFromMatrix(countData = cts_t,
colData = design,
design = ~sample)
dds$sample <- relevel(dds$sample, ref = "PA")
keep <- rowSums(counts(dds)) > 0
dds <- dds[keep,]
dds <- DESeq(dds)
resTKO <- results(dds, contrast = c("sample", "TKO", "PA"))
resTKO
resTKO <- resTKO %>% filter(padj <= 0.05 & abs(log2FoldChange >= 2))
resTKO <- resTKO %>% dplyr::filter(padj <= 0.05 & abs(log2FoldChange >= 2))
resTKO <- data.frame(resTKO) %>% dplyr::filter(padj <= 0.05 & abs(log2FoldChange >= 2))
resTKO <- data.frame(resTKO) %>% dplyr::filter(padj <= 0.05 & abs(log2FoldChange) >= 2)
resTKO <- results(dds, contrast = c("sample", "TKO", "PA"))
resTKO <- data.frame(resTKO) %>% dplyr::filter(padj <= 0.05 & abs(log2FoldChange) >= 2)
# remove the DEC samples
# directories
wd <- "D:/PhD/Analysis/10T/"
setwd(wd)
rawdir <- paste0(wd, "/telocal/")
outdir <- paste0(wd, "/pics/")
load("C3Honly.RData")
# libs
library(DESeq2)
library(plotly)
# library(gplots)
library(dplyr)
library(tidyverse)
library(GenomicFeatures)
library(RColorBrewer)
design <- read.table("meta", header = T)
rownames(design) <- design$file
design <- design[grepl("C3H10T1", design$batch),]
design$sample <- factor(design$sample)
design$replicate <- factor(design$replicate)
design$batch <- factor(design$batch)
source('D:/PhD/Rmarkdown/Lucystuff/C3H1012.R', echo=TRUE)
# remove the DEC samples
# directories
wd <- "D:/PhD/Analysis/10T/"
setwd(wd)
rawdir <- paste0(wd, "/telocal/")
outdir <- paste0(wd, "/pics/")
load("C3Honly.RData")
# libs
library(DESeq2)
library(plotly)
# library(gplots)
library(dplyr)
library(tidyverse)
library(GenomicFeatures)
library(RColorBrewer)
design <- read.table("meta", header = T)
rownames(design) <- design$file
design <- design[grepl("C3H10T1", design$batch),]
design$sample <- factor(design$sample)
design$replicate <- factor(design$replicate)
design$batch <- factor(design$batch)
meta <- data.frame(sampleName = paste0(design$file, ".cntTable"),
fileName = paste0(design$file, ".cntTable"),
sample = design$sample,
condition = design$batch,
replicate = design$replicate)
load('counts.RData')
head(gs)
head(cts)
rownames(cts) <- gs
# truncated CTS
cts_t <- cts %>% dplyr::select(contains("C3H10T1"))
# Create DESeq obj
dds <- DESeqDataSetFromMatrix(countData = cts_t,
colData = design,
design = ~sample)
dds$sample <- relevel(dds$sample, ref = "PA")
rownames(dds) <- gs
keep <- rowSums(counts(dds)) > 0
dds <- dds[keep,]
dds <- DESeq(dds)
